@page "/employees"
@using DotNet_aspire_app.ApiService.models
@attribute [StreamRendering(true)]
@using static DotNet_aspire_app.Web.EmployeeApiClient
@attribute [OutputCache(Duration = 5)]
@inject EmployeeApiClient EmployeeApi
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime


<PageTitle>Employee</PageTitle>
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="successModalLabel">Success</h5>
            </div>
            <div class="modal-body">
                <p id="successMessage" class="m-0"></p>
            </div>
        </div>
    </div>
</div>

<div class="modal fade demo-fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">@((isEditingMood ? "Edit" : "Add") + " Employee")</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div>
                    <EditForm Model="newEmployee" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                       @*  <ValidationSummary /> *@

                        <div class="mb-3">
                            <label for="FullName" class="form-label">Full Name</label>
                            <InputText class="form-control" id="FullName" @bind-Value="newEmployee.FullName" />
                            <ValidationMessage For="@(() => newEmployee.FullName)" />
                        </div>

                        <div class="mb-3">
                            <label for="Position" class="form-label">Position</label>
                            <select class="form-select" id="Position" @bind="newEmployee.Position">
                                <option value="">Select a position</option>
                                <option value="Backend Developer">Backend Developer</option>
                                <option value="Blockchain Developer">Blockchain Developer</option>
                                <option value="Data Scientist">Data Scientist</option>
                                <option value="Front-End Developer">Front-End Developer</option>
                                <option value="Full Stack Developer">Full Stack Developer</option>
                                <option value="Web Developer">Web Developer</option>
                                <option value="UX Designer">UX Designer</option>
                                <option value="Software Engineer">Software Engineer</option>
                                <option value=".NET Developer">.NET Developer</option>
                                <option value="Information Technology Manager">Backend Developer</option>

                            </select>
                            <ValidationMessage For="@(() => newEmployee.Position)" />
                        </div>

                        <div class="mb-3">
                            <label for="Salary" class="form-label">Salary</label>
                            <input type="text" class="form-control" id="Salary" @bind="newEmployee.Salary" />
                         @*    <InputNumber class="form-control" id="Salary" @bind-Value="newEmployee.Salary" /> *@
                            <ValidationMessage For="@(() => newEmployee.Salary)" />
                        </div>

                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary remove-class">@((isEditingMood ? "Update" : "Submit"))</button>
                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success mt-2">@successMessage</div>
                        }

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-2">@errorMessage</div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>
<h3>Employee</h3>
<p>This component demonstrates showing employee data loaded from a backend API service.</p>
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="() => OpenModal(false)">
    Employee Create
</button>

 @if (employees == null)
{
    <p><em>Loading...</em></p>
}else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Position</th>
                <th>Salary</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr>
                    <td>@employee.Id</td>
                    <td>@employee.FullName</td>
                    <td>@employee.Position</td>
                    <td>@employee.Salary</td>
                    <td>
                        <button data-bs-toggle="modal" data-bs-target="#exampleModal" class="btn btn-warning me-3" @onclick="() => OpenModal(true, employee)">Edit</button>
                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteConfirmModal" @onclick="() => SetEmployeeToDelete(employee.Id)">Delete</button>

                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this employee?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="DeleteEmpData">Delete</button>
            </div>
        </div>
    </div>
</div>
<script>
    function closeEmployeeModal() {
        var modalElement = document.getElementById('exampleModal');
        var modalInstance = bootstrap.Modal.getInstance(modalElement);
        if (modalInstance) {
            modalInstance.hide();
        } else {
            // In case the modal has not been instantiated, create an instance and hide it
            modalInstance = new bootstrap.Modal(modalElement);
            modalInstance.hide();
        }
    }
</script>

<script>
    function showSuccessModalWithTimeout(message, timeout = 1000) {
        document.getElementById('successMessage').innerText = message;
        var successModal = new bootstrap.Modal(document.getElementById('successModal'));
        successModal.show();

        // Set a timeout to hide the modal after `timeout` milliseconds
        setTimeout(() => {
            successModal.hide();
        }, timeout);
    }
</script>
@code {
    private List<EmployeeModel>? employees = new List<EmployeeModel>();

    private EmployeeModel newEmployee = new EmployeeModel();
    private bool isEditingMood = false;
    private string successMessage;
    private string errorMessage;

    [Parameter]
    public int? Id  { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadEmployeesAsync();
    }

    private async Task HandleSubmit()
    {
        try
        {
            successMessage = errorMessage = string.Empty;
            if (isEditingMood)
            {
                await EmployeeApi.UpdateEmployee(newEmployee.Id, newEmployee);
                await JSRuntime.InvokeVoidAsync("showSuccessModalWithTimeout", "Data successfully updated!", 1000);
             
            }
            else
            {
                await EmployeeApi.AddEmployeeAsync(newEmployee);
                await JSRuntime.InvokeVoidAsync("showSuccessModalWithTimeout", "Data successfully added!", 1000);
            }
            await LoadEmployeesAsync();
            newEmployee = new EmployeeModel();
            await JSRuntime.InvokeVoidAsync("closeEmployeeModal");
        }
        catch (Exception  ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }

       
    }
    private void OpenModal(bool editMode, EmployeeModel? employee = null)
    {
        isEditingMood = editMode;
        if (editMode && employee != null)
        {
            newEmployee = employee; 
        }
        else
        {
            newEmployee = new EmployeeModel(); 
        }
    }
    private async Task LoadEmployeesAsync()
    {
        try
        {
            employees = await EmployeeApi.GetEmployeeAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching employees: {ex.Message}");
        }
    }

    private async Task DeleteEmpData()
    {
        await EmployeeApi.DeleteEmployee(employeeToDeleteId);
        await JSRuntime.InvokeVoidAsync("showSuccessModalWithTimeout", "Data successfully deleted!", 1000);
        employees = await EmployeeApi.GetEmployeeAsync();

    }
    private int employeeToDeleteId;

    private void SetEmployeeToDelete(int id)
    {
        employeeToDeleteId = id;
    }



}